#!/usr/bin/env node
import Uo from"meow";import{useCallback as f,useLayoutEffect as Lo,useState as _}from"react";import{render as Ko,Box as Qo,useApp as Fo}from"ink";import wo from"ink-spinner";import{Box as R,Text as Co}from"ink";import{Box as yo,Text as Y}from"ink";import{jsx as To,jsxs as j}from"react/jsx-runtime";var h=o=>To(yo,{flexDirection:"column",children:o.questions.map((e,r)=>r===o.questions.length-1&&o.isHighlightLast?j(Y,{bold:!0,color:"white",children:["\u203A ",e]},r):j(Y,{color:"gray",children:["\u203A ",e]},r))});import{jsx as w,jsxs as G}from"react/jsx-runtime";var H=o=>G(R,{flexDirection:"column",children:[w(R,{marginBottom:1,children:w(h,{questions:o.questions,isHighlightLast:!0})}),G(R,{marginBottom:1,children:[w(R,{marginRight:1,children:w(wo,{type:"dots"})}),w(Co,{color:"gray",children:"\u{1F914} ChatGPT is thinking..."})]})]});import{useState as bo}from"react";import So from"ink-text-input";import{Box as q,Text as A}from"ink";import{Fragment as U,jsx as B,jsxs as y}from"react/jsx-runtime";var z=o=>{let[e,r]=bo("");return y(q,{flexDirection:"column",children:[y(q,{marginBottom:1,flexDirection:"column",children:[o.questions.length===0&&y(U,{children:[B(A,{children:"Enter your CLI question to ChatGPT:"}),B(A,{color:"gray",children:"Exmple: How do I convert a video to a gif using ffmpeg?"})]}),!!o.questions.length&&y(U,{children:[B(q,{marginBottom:1,children:B(h,{questions:o.questions,isHighlightLast:!1})}),B(A,{children:"Ask a follow-up:"})]})]}),y(q,{marginRight:1,children:[y(A,{bold:!0,color:"cyan",children:["\u203A"," "]}),B(So,{value:e,onChange:r,onSubmit:o.onSubmit})]})]})};import{useState as Eo}from"react";import{Box as C,Text as b}from"ink";import{Box as M,Text as $}from"ink";import{jsx as J,jsxs as P}from"react/jsx-runtime";var I=o=>J(M,{children:o.items.map(e=>P(M,{children:[P($,{bold:!0,backgroundColor:"green",color:"whiteBright",children:[" ",e.letter," "]}),J(M,{children:P($,{bold:!0,color:"white",children:[" ",e.name,"  "]})})]},e.letter))});import{useInput as Ro}from"ink";import{marked as V}from"marked";import qo from"marked-terminal";import{jsx as l,jsxs as W}from"react/jsx-runtime";V.setOptions({renderer:new qo,mangle:!1,headerIds:!1});var X=o=>{let[e,r]=Eo("");return Ro(n=>{n==="n"&&o.onNewQuestion(),n==="f"&&o.onAskFollowup(),n==="c"&&(o.onCopyToClipboard(),r("\u{1F44D} Copied to clipboard!"),setTimeout(()=>{r("")},1500)),n==="q"&&o.onExit()}),W(C,{flexDirection:"column",marginBottom:1,children:[l(C,{marginBottom:1,children:l(h,{questions:o.questions,isHighlightLast:!0})}),l(C,{marginBottom:1,children:l(b,{bold:!0,underline:!0,color:"cyan",children:"Command:"})}),l(b,{children:o.text}),l(C,{marginBottom:1,marginTop:1,children:l(b,{bold:!0,underline:!0,color:"cyanBright",children:"Explanation:"})}),l(b,{children:V(o.explanation)}),W(C,{marginTop:2,children:[!!e&&l(b,{color:"green",children:e}),!e&&l(I,{items:[{letter:"n",name:"New question"},{letter:"f",name:"Ask a followup"},{letter:"c",name:"Copy command"},{letter:"q",name:"Quit"}]})]})]})};import{Box as k,Text as Z}from"ink";import{useInput as Ao}from"ink";import{jsx as S,jsxs as Io}from"react/jsx-runtime";var oo=o=>(Ao(e=>{e==="n"&&o.onNewQuestion(),e==="q"&&o.onExit()}),Io(k,{flexDirection:"column",children:[S(k,{marginRight:1,children:S(Z,{backgroundColor:"red",color:"white",children:"ERROR:"})}),S(Z,{children:o.message}),S(k,{marginTop:2,children:S(I,{items:[{letter:"n",name:"New question"},{letter:"q",name:"Quit"}]})})]}));import Yo from"clipboardy";import jo from"conf";import{useCallback as so,useState as D}from"react";import ao from"ink-text-input";import{Box as a,Text as p}from"ink";import{useInput as _o}from"ink";import{useCallback as ro,useRef as Po}from"react";import ko from"json5";import{Configuration as Oo,OpenAIApi as vo}from"openai";import*as eo from"node:os";var Mo=()=>{let o=eo.type();return o==="Darwin"?o="mac":o==="Linux"?o="linux":o==="Windows_NT"?o="windows":o="mac",o},to=`
- I will tell you below which cli task I want to accomplish and you will provide the cli command and also explain it
- Assume a ${Mo()} operating system.
`,no=`
- Return a json object ONLY
- Do not return anything else besides the json object, no explanation, no extra text, no headers, no notes, nothing else
- The json object should have the following attributes, and nothing else:
  1. 'command' - the cli command that accomplishes the task (a string)
  2. 'explanation' - the explanation of the command, in markdown (a string)
  3. 'error' - an error message if you cannot understand the task or if there is any other error (a string)
- if you cannot complete the task, return the json object with the 'error' attribute set to a string explaining why
- Here is an example of a valid json object response:

{
  "command": "ls -l",
  "explanation": "The \`ls\` command lists the files in the current directory. The \`-l\` flag tells \`ls\` to use the long format, which includes the file permissions, the number of links, the owner, the group, the size, the date, and the filename. The long format is useful for seeing detailed information about the files in the current directory.",
  "error": ""
}

- Here is an example of a valid json object response, when you encounter an error:

{
  "command": "",
  "explanation": "",
  "error": "I cannot complete the task because I do not understand it."
}

- return only ONE json object per response, never more than one
- answer only the latest question of the user, do not answer previous questions

The Json object response:
`;var v="gpt-3.5-turbo",Do={role:"user",content:to},No={role:"user",content:no},O=o=>({command:"",explanation:"",error:o}),io=()=>{let o=Po(null),e=ro(async n=>{var c,t;if(!o.current)throw Error("Cannot make request before api is initialized");let s=[Do];for(let m of n)s.push({role:"user",content:m});s.push(No);try{let m=await o.current.createChatCompletion({model:v,messages:s});if((c=m.data)!=null&&c.choices.length){let d=(t=m.data.choices[0].message)==null?void 0:t.content;return d?ko.parse(d):O("Could not parse response from OpenAI")}else return O("No response from OpenAI")}catch(m){return O(m.message)}},[]),r=ro(n=>{o.current=new vo(new Oo({apiKey:n}))},[]);return{makeRequest:e,setApiKey:r}};import{Fragment as N,jsx as i,jsxs as u}from"react/jsx-runtime";var mo=o=>{let[e,r]=D("apiKey"),[n,s]=D(""),[c,t]=D("");_o(()=>{e==="done"&&o.onDone()});let m=so(()=>{o.onSetApiKey(n),r("model")},[n]),d=so(()=>{o.onSetModel(c),r("done")},[c]);return u(a,{flexDirection:"column",children:[i(a,{marginBottom:1,flexDirection:"column",children:i(p,{color:"cyan",bold:!0,underline:!0,children:"Initial Setup"})}),e==="apiKey"&&u(N,{children:[u(a,{marginBottom:1,flexDirection:"column",children:[i(p,{children:"Your OpenAI API key is required to make requests"}),i(p,{color:"gray",children:"Get it from https://platform.openai.com/account/api-keys"})]}),u(a,{marginBottom:1,flexDirection:"row",children:[i(a,{marginRight:1,children:i(p,{bold:!0,children:"Enter OpenAI API Key:"})}),i(ao,{value:n,onChange:s,onSubmit:m})]})]}),e==="model"&&u(N,{children:[u(a,{marginBottom:1,flexDirection:"column",children:[i(p,{children:"Enter the model to use"}),u(p,{color:"gray",children:["Leave empty to use '",v,"'"]})]}),u(a,{marginBottom:1,flexDirection:"row",children:[i(a,{marginRight:1,children:i(p,{bold:!0,children:"Enter Model:"})}),i(ao,{value:c,onChange:t,onSubmit:d})]})]}),e==="done"&&u(N,{children:[i(a,{marginBottom:1,flexDirection:"column",children:u(p,{children:["Config was saved to ",o.configPath]})}),i(a,{marginBottom:1,flexDirection:"row",children:i(a,{marginRight:1,children:i(p,{bold:!0,children:"Press any key to continue..."})})})]})]})};import{jsx as T,jsxs as Ho}from"react/jsx-runtime";var E="apiKey",L="model",g=new jo({projectName:"help-cli"}),Go=()=>{let[o,e]=_("input"),{makeRequest:r,setApiKey:n}=io(),[s,c]=_([]),[t,m]=_(null),{exit:d}=Fo();Lo(()=>{g.get(E)?(n(g.get(E)),e("input")):e("setup")},[]);let co=f(x=>{g.set(E,x),n(x)},[n]),po=f(x=>{g.set(L,x)},[]),K=f(()=>{c([]),e("input")},[]),go=f(()=>{e("input")},[]),fo=f(()=>{t!=null&&t.command&&Yo.write(t.command)},[]),Q=f(()=>{d()},[]),xo=f(async x=>{e("loading"),c(Bo=>[...Bo,x]);let F=await r([...s,x]);m(F),F.error?e("error"):e("result")},[s]),ho=f(()=>{e("input")},[]);return Ho(Qo,{marginLeft:4,marginRight:4,marginTop:2,marginBottom:2,children:[o==="setup"&&T(mo,{configPath:g.path,onSetApiKey:co,onSetModel:po,onDone:ho}),o==="input"&&T(z,{questions:s,onSubmit:xo}),o==="loading"&&T(H,{questions:s}),o==="error"&&T(oo,{message:t==null?void 0:t.error,onNewQuestion:K,onExit:Q}),o==="result"&&T(X,{questions:s,text:t==null?void 0:t.command,explanation:t==null?void 0:t.explanation,onAskFollowup:go,onCopyToClipboard:fo,onNewQuestion:K,onExit:Q})]})},lo=()=>{Ko(T(Go,{}))};var uo=Uo(`
	Usage
	  $ help-cli

	Options
	  --help,    -h  Show help
	  --version, -v  Show version
	  --config,  -c  Show the config path
	  --reset,   -r  Reset the config so the next run will recreate it

`,{importMeta:import.meta,flags:{config:{type:"boolean",shortFlag:"c"},reset:{type:"boolean",shortFlag:"r"}}}),zo=async()=>{try{lo()}catch(o){console.error(o)}};uo.flags.config?console.log(g.path):uo.flags.reset?(g.set(E,""),g.set(L,""),console.log("Config was reset")):zo();
